/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rsa;

import java.io.IOException;
import java.math.BigInteger;
import java.util.Random;
import java.util.Scanner;

/**
 *
 * @author aisling
 */
//originally found code on https://www.sanfoundry.com/java-program-implement-rsa-algorithm/ however and went and researched
//big integer in java before. The website above helped me understand the need for the different methods used. 
public class RSACrypto
{
//    final private int keylength = 2048;
//    final private int keylength = 4096;
    final private int keylength = 1024;
    private BigInteger p;
    private BigInteger q;
    private BigInteger N;
    private BigInteger phi;
    private BigInteger e;
    private BigInteger d;
    
    public static void main(String[] args) throws IOException
    {
        try
        {
            //calling an instance of the RSACRypto class
            RSACrypto rsa = new RSACrypto();
        }
        catch (Exception e)
        {
            System.out.println(e);
        }
    }

    public RSACrypto()
    {
        //generating a random number
        Random randomNum = new Random();
        
        //Key Generation : 2 relativley large primes p and q
        p = BigInteger.probablePrime(keylength, randomNum);
        q = BigInteger.probablePrime(keylength, randomNum);
        
        //Ensuring p does not equal q
        if (!(p.equals(q)))
        {
            //N is a public key generated by p*q
            N = p.multiply(q);

            //phi is equal to (p-1)*(q-1)
            phi = (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE));

            //e is private 
            e = BigInteger.probablePrime(keylength / 2, randomNum);

            //Checking if e is coprime to phi(N) and is smaller than phi. 
            while (phi.gcd(e).compareTo(BigInteger.ONE) > 0 && e.compareTo(phi) < 0)
            {
                //if not add one
                e.add(BigInteger.ONE);
            }

            //d is found by e mod inverse of phi as e*d must equal 1(mod phi(N))
            d = e.modInverse(phi);
            
            Scanner in = new Scanner(System.in);
            System.out.println("Enter the plain text:");
            //Read in string value from user
            String plainText = in.nextLine();
            
            //Encrypting plaintext -> Ciphertext = plaintext^e(modN)
            BigInteger message = new BigInteger(plainText.getBytes());
            byte[] cipher = encryptStage(message,e,N);
            System.out.println("Person A Encodes Text: " + byteArrayToString(plainText.getBytes()));
            
           //Decrypting Cipher text -> plaintext = ciphertext^d(modN)
            byte[] decrypted = decryptStage(cipher,d,N);
            System.out.println("Person B Decodes Text: " + byteArrayToString(decrypted));
            System.out.println("Plain Text: " +  new String(decrypted));
        }
        else
        {
            //ending the program if p is equal to q
            System.out.println("P equals Q please run the program again");
            System.exit(0);

        }
    }
    private static String byteArrayToString(byte[] message)
    {
        String text = "";
        //iterating through each byte in the array to generate a string
        for(byte b : message)
        {
            text += Byte.toString(b);
        }
        return text;
    }

    public static byte[] encryptStage(BigInteger message, BigInteger e,BigInteger n)
    {
        byte[] encryption = message.modPow(e,n).toByteArray();
        return encryption;
    }
    
    public static byte[] decryptStage(byte[] message, BigInteger d, BigInteger n) 
    {
        BigInteger cipher = new BigInteger(message);
        byte[] plainText = cipher.modPow(d, n).toByteArray();
        return plainText;
    }
}
